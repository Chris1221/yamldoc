{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation Engine for YAML This package converts a YAML file into markdown, formatting values and associated metadata in a doxygen -like way. Installation pip install yamldoc This will install the python package, which contains a command line interface yamldoc . To see usage instructions, invoke the --help flag: yamldoc -h Philosophy Many programs and utilities use YAML ( YAML Ain't Markup Language ) as a human and machine readable interface to configuration parameters and other values. More broadly, many kinds of data can be stored in YAML with minimal effort from the user. However, often a configuration file accumulates a highly specific set of configurations marked up with vague, difficult to interpret comments. It is the goal of this package to provide an easy interface for developers to document data in their YAML files as well as the expected types from a JSON YAML schema validator . Doing so will allow a transparent interface between the developer's expectations and the user's configurations. Specific Application to Snakemake This package was designed specifically to document the possible configuration options of a Snakemake pipeline. In this application, the developer of the pipeline encodes many different specific options that the user may configure at run time, but these are often poorly documented. When they are, it is easy for the documentation to fall out of sync with the actual options in the configuration file. yamldoc automatically documents all configuration paramters as well as taking types from a schema file. The package will also read any comments that are present above each paramter and insert them into a parameter table for easy reference. For more details on using YAML to configure Snakemake pipelines, see here . Example Files For a minimal example of yamldoc , see the files in /test/yaml and /test/schema . Usage For a basic report, point the command line interface to a YAML file. yamldoc test/yaml/basic.yaml You can also include type information from a schema file. yamldoc test/yaml/basic.yaml -s test/schema/basic.schema Other Options yamldoc defaults to using #' as a special marker, but you can choose this character yourself if you wish. Just set it on the command line at parse-time: yamldoc test/yaml/basic.yaml -c \"YOURCHAR\" yamldoc also includes support for certain special declarations in the schema file. Right now these include: _yamldoc_title : This specifies the overall title of the markdown page generated. _yamldoc_description : A description to follow the title. These are picked out of the schema file and reported.","title":"Documentation Engine for YAML"},{"location":"#documentation-engine-for-yaml","text":"This package converts a YAML file into markdown, formatting values and associated metadata in a doxygen -like way.","title":"Documentation Engine for YAML"},{"location":"#installation","text":"pip install yamldoc This will install the python package, which contains a command line interface yamldoc . To see usage instructions, invoke the --help flag: yamldoc -h","title":"Installation"},{"location":"#philosophy","text":"Many programs and utilities use YAML ( YAML Ain't Markup Language ) as a human and machine readable interface to configuration parameters and other values. More broadly, many kinds of data can be stored in YAML with minimal effort from the user. However, often a configuration file accumulates a highly specific set of configurations marked up with vague, difficult to interpret comments. It is the goal of this package to provide an easy interface for developers to document data in their YAML files as well as the expected types from a JSON YAML schema validator . Doing so will allow a transparent interface between the developer's expectations and the user's configurations.","title":"Philosophy"},{"location":"#specific-application-to-snakemake","text":"This package was designed specifically to document the possible configuration options of a Snakemake pipeline. In this application, the developer of the pipeline encodes many different specific options that the user may configure at run time, but these are often poorly documented. When they are, it is easy for the documentation to fall out of sync with the actual options in the configuration file. yamldoc automatically documents all configuration paramters as well as taking types from a schema file. The package will also read any comments that are present above each paramter and insert them into a parameter table for easy reference. For more details on using YAML to configure Snakemake pipelines, see here .","title":"Specific Application to Snakemake"},{"location":"#example-files","text":"For a minimal example of yamldoc , see the files in /test/yaml and /test/schema .","title":"Example Files"},{"location":"#usage","text":"For a basic report, point the command line interface to a YAML file. yamldoc test/yaml/basic.yaml You can also include type information from a schema file. yamldoc test/yaml/basic.yaml -s test/schema/basic.schema","title":"Usage"},{"location":"#other-options","text":"yamldoc defaults to using #' as a special marker, but you can choose this character yourself if you wish. Just set it on the command line at parse-time: yamldoc test/yaml/basic.yaml -c \"YOURCHAR\" yamldoc also includes support for certain special declarations in the schema file. Right now these include: _yamldoc_title : This specifies the overall title of the markdown page generated. _yamldoc_description : A description to follow the title. These are picked out of the schema file and reported.","title":"Other Options"},{"location":"sphinx/","text":"Sphinx Integration A primary motivation for yamldoc was to generate documentation for YAML configuration files dynamically, in order that documentation does not outpace development. I have plans to include yamldoc in a Sphinx extension in the future, but for now there is a simple way to generate your parameter references with each build of the documentation. Sphinx Setup For this example, we have chosen to place our Sphinx documentation in the docs/ folder. Inside this folder is a directory for the source scripts, a directory for the built HTML files (if building a website), and a Makefile . You must first install some sort of Markdown parser so that the markdown that is produced from yamldoc can be understood by Sphinx. For this we recommend recommonmark . Since there is no support for markdown style tables in this package, you have to also install sphinx-markdown-tables . Install these two packages with pip . pip install recommonmark sphinx-markdown-tables Sphinx Configuration You must include these two new extensions in your sphinx documentation. Open the source/conf.py configuration file that Sphinx uses to load extensions, and add both of these to the list called extensions . extensions = [ ... 'recommonmark', 'sphinx_markdown_tables' ] Manual Method If you don't mind running yamldoc every time you change a YAML file, you can run it manually. Since yamldoc prints to STDOUT by default, just create the documentation and pipe it to a convenient file: yamldoc your/yaml/file.yaml > docs/source/parameters.md Be sure to include this in the table of contents (TOC) of your project (typically docs/source/index.rst )! Automatic Method If you've made it this far, you're probably in search of a \"set it and forget it\" method. I will be the first to admit that this is a bit hack-y, but it hasn't broken for me yet. Until I make a real Sphinx extension, edit the docs/Makefile in your favourite text editor. The last line should look something like this: %: Makefile @$(SPHINXBUILD) -M $@ \"$(SOURCEDIR)\" \"$(BUILDDIR)\" $(SPHINXOPTS) $(O) Simply add a file to generate your parameters.md file with yamldoc before any building is done with Sphinx. %: Makefile yamldoc your/yaml/file.yaml > source/parameters.md` @$(SPHINXBUILD) -M $@ \"$(SOURCEDIR)\" \"$(BUILDDIR)\" $(SPHINXOPTS) $(O) Remember to include this new file in the table of contents (TOC) for your project (typically docs/source/index.rst )! For more details on how to document YAML files with yamldoc , see the tutorials .","title":"Sphinx Integration"},{"location":"sphinx/#sphinx-integration","text":"A primary motivation for yamldoc was to generate documentation for YAML configuration files dynamically, in order that documentation does not outpace development. I have plans to include yamldoc in a Sphinx extension in the future, but for now there is a simple way to generate your parameter references with each build of the documentation.","title":"Sphinx Integration"},{"location":"sphinx/#sphinx-setup","text":"For this example, we have chosen to place our Sphinx documentation in the docs/ folder. Inside this folder is a directory for the source scripts, a directory for the built HTML files (if building a website), and a Makefile . You must first install some sort of Markdown parser so that the markdown that is produced from yamldoc can be understood by Sphinx. For this we recommend recommonmark . Since there is no support for markdown style tables in this package, you have to also install sphinx-markdown-tables . Install these two packages with pip . pip install recommonmark sphinx-markdown-tables","title":"Sphinx Setup"},{"location":"sphinx/#sphinx-configuration","text":"You must include these two new extensions in your sphinx documentation. Open the source/conf.py configuration file that Sphinx uses to load extensions, and add both of these to the list called extensions . extensions = [ ... 'recommonmark', 'sphinx_markdown_tables' ]","title":"Sphinx Configuration"},{"location":"sphinx/#manual-method","text":"If you don't mind running yamldoc every time you change a YAML file, you can run it manually. Since yamldoc prints to STDOUT by default, just create the documentation and pipe it to a convenient file: yamldoc your/yaml/file.yaml > docs/source/parameters.md Be sure to include this in the table of contents (TOC) of your project (typically docs/source/index.rst )!","title":"Manual Method"},{"location":"sphinx/#automatic-method","text":"If you've made it this far, you're probably in search of a \"set it and forget it\" method. I will be the first to admit that this is a bit hack-y, but it hasn't broken for me yet. Until I make a real Sphinx extension, edit the docs/Makefile in your favourite text editor. The last line should look something like this: %: Makefile @$(SPHINXBUILD) -M $@ \"$(SOURCEDIR)\" \"$(BUILDDIR)\" $(SPHINXOPTS) $(O) Simply add a file to generate your parameters.md file with yamldoc before any building is done with Sphinx. %: Makefile yamldoc your/yaml/file.yaml > source/parameters.md` @$(SPHINXBUILD) -M $@ \"$(SOURCEDIR)\" \"$(BUILDDIR)\" $(SPHINXOPTS) $(O) Remember to include this new file in the table of contents (TOC) for your project (typically docs/source/index.rst )! For more details on how to document YAML files with yamldoc , see the tutorials .","title":"Automatic Method"},{"location":"tutorial/","text":"Tutorials The following tutorials assumes knowledge of how to interact with files in a command line environment. Otherwise, basic Linux skills and an understanding of Python syntax will be an asset. Flat YAML The most common use case for this software will be to generate configuration for a flat file of configuration options. In this case, there are many parameters, each with a name, and a value. See below for a minimal example. #' Here is some meta data. meta: \"Data\" #' And here is #' some more #' split over #' a couple of lines. fun: True Each value has a name, a colon, and a value. Above each value we have given meta data in a comment with a specific prefix #' . This can be whatever character you want, so long as it is consistent. You can give different prefix characters with the -c flag. To create a report from this file, point yamldoc to it. yamldoc test/yaml/basic.yaml Which gives Configuration Parameters Reference Any information about this page goes here. Key Value Information meta \"Data\" Here is some meta data. fun True And here is some more split over a couple of lines. Generated by yamldoc v0.1.2 on 2020-10-06 Notice how yamldoc intelligently joins and wraps long comments to fit inside the table. In later tutorials, we will see how to extend this and automatically embed the results in Sphinx documentation. Flat YAML with Schema A developer can choose to additionally validate the input that a user gives in a YAML file through a schema. For more information on the version of schema that is implemented here, see the documentation . Here is an example of a schema file for the above example. $schema: \"http://json-schema.org/draft-04/schema#\" type: object properties: meta: type: string fun: type: bool A schema must contain a link to the original definition, here given as a link, and a description of each variable. In this case, the schema is simple. It is describing an object with two properties (variables), meta , and fun . It succinctly gives the expected type declaration for these variables, which can be validated at run time. To include this in the above report with yamldoc , set the -s flag. yamldoc test/yaml/basic.yaml -s test/schema/basic.schema Which outputs: Configuration Parameters Reference Any information about this page goes here. Key Value Type Information meta \"Data\" string Here is some meta data. fun True bool And here is some more split over a couple of lines. Generated by yamldoc v0.1.2 on 2020-10-06 The difference between these two reports is the inclusion of the Type column. Modifying the Title and Description Though the title and description of this page can easily be edited after it is generated, we also include a special declaration in the schema file to modify these easily. Edit the schema file from before and add the following lines: $schema: \"http://json-schema.org/draft-04/schema#\" _yamldoc_title: My Awesome Title _yamldoc_description: This can be a long string or paragraph talking about your parameters and describing how to use them. You can use line breaks too, you just have to write them manually.<br><br> Isn't that cool? type: object properties: meta: type: string fun: type: bool Which gives My Awesome Title This can be a long string or paragraph talking about your parameters and describing how to use them. You can use line breaks too, you just have to write them manually. Isn't that cool? Key Value Type Information meta \"Data\" string Here is some meta data. fun True bool And here is some more split over a couple of lines. Generated by yamldoc v0.1.2 on 2020-10-06 Hierarchical YAML yamldoc also includes support for a maximum of two levels deep hierarchical representations of data . For examples, see test/yaml/two_level.yaml and test/schema/two_level.schema . The program is run the same way.","title":"Tutorials"},{"location":"tutorial/#tutorials","text":"The following tutorials assumes knowledge of how to interact with files in a command line environment. Otherwise, basic Linux skills and an understanding of Python syntax will be an asset.","title":"Tutorials"},{"location":"tutorial/#flat-yaml","text":"The most common use case for this software will be to generate configuration for a flat file of configuration options. In this case, there are many parameters, each with a name, and a value. See below for a minimal example. #' Here is some meta data. meta: \"Data\" #' And here is #' some more #' split over #' a couple of lines. fun: True Each value has a name, a colon, and a value. Above each value we have given meta data in a comment with a specific prefix #' . This can be whatever character you want, so long as it is consistent. You can give different prefix characters with the -c flag. To create a report from this file, point yamldoc to it. yamldoc test/yaml/basic.yaml Which gives","title":"Flat YAML"},{"location":"tutorial/#configuration-parameters-reference","text":"Any information about this page goes here. Key Value Information meta \"Data\" Here is some meta data. fun True And here is some more split over a couple of lines. Generated by yamldoc v0.1.2 on 2020-10-06 Notice how yamldoc intelligently joins and wraps long comments to fit inside the table. In later tutorials, we will see how to extend this and automatically embed the results in Sphinx documentation.","title":"Configuration Parameters Reference"},{"location":"tutorial/#flat-yaml-with-schema","text":"A developer can choose to additionally validate the input that a user gives in a YAML file through a schema. For more information on the version of schema that is implemented here, see the documentation . Here is an example of a schema file for the above example. $schema: \"http://json-schema.org/draft-04/schema#\" type: object properties: meta: type: string fun: type: bool A schema must contain a link to the original definition, here given as a link, and a description of each variable. In this case, the schema is simple. It is describing an object with two properties (variables), meta , and fun . It succinctly gives the expected type declaration for these variables, which can be validated at run time. To include this in the above report with yamldoc , set the -s flag. yamldoc test/yaml/basic.yaml -s test/schema/basic.schema Which outputs:","title":"Flat YAML with Schema"},{"location":"tutorial/#configuration-parameters-reference_1","text":"Any information about this page goes here. Key Value Type Information meta \"Data\" string Here is some meta data. fun True bool And here is some more split over a couple of lines. Generated by yamldoc v0.1.2 on 2020-10-06 The difference between these two reports is the inclusion of the Type column.","title":"Configuration Parameters Reference"},{"location":"tutorial/#modifying-the-title-and-description","text":"Though the title and description of this page can easily be edited after it is generated, we also include a special declaration in the schema file to modify these easily. Edit the schema file from before and add the following lines: $schema: \"http://json-schema.org/draft-04/schema#\" _yamldoc_title: My Awesome Title _yamldoc_description: This can be a long string or paragraph talking about your parameters and describing how to use them. You can use line breaks too, you just have to write them manually.<br><br> Isn't that cool? type: object properties: meta: type: string fun: type: bool Which gives","title":"Modifying the Title and Description"},{"location":"tutorial/#my-awesome-title","text":"This can be a long string or paragraph talking about your parameters and describing how to use them. You can use line breaks too, you just have to write them manually. Isn't that cool? Key Value Type Information meta \"Data\" string Here is some meta data. fun True bool And here is some more split over a couple of lines. Generated by yamldoc v0.1.2 on 2020-10-06","title":"My Awesome Title"},{"location":"tutorial/#hierarchical-yaml","text":"yamldoc also includes support for a maximum of two levels deep hierarchical representations of data . For examples, see test/yaml/two_level.yaml and test/schema/two_level.schema . The program is run the same way.","title":"Hierarchical YAML"}]}